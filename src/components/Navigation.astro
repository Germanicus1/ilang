---
import { Icon } from 'astro-icon/components';

const basePath = import.meta.env.BASE_URL;

const navLinks = [
	{
		name: 'Inicio',
		url: '',
		style: 'transparent',
	},
	{
		name: 'Ruta de Aprendizaje',
		url: 'paths',
		style: 'transparent',
	},
	{
		name: 'Precios',
		url: '#pricing',
		style: 'transparent',
	},
	{
		name: 'Sobre MÃ­',
		url: 'about',
		style: 'transparent',
	},
];
---

<nav class="sticky left-0 top-0 z-50 w-full border-b-2 border-b-yellow-500 bg-bkg">
	<div
		class="nav-container mx-2 flex items-center justify-between border-0 bg-bkg p-2 sm:shadow-none"
	>
		<Icon name="global" size="clamp(30px, 4vw, 50px)" class="logo" />
		<div class="nav-wrapper flex items-center gap-4 bg-inherit">
			<button
				class="btn btn--menu peer sm:hidden"
				id="menu-btn"
				aria-expanded="false"
				aria-label="Open mobile nav"
			>
				<Icon name="fe:bar" size="30px" />
			</button>
			<!-- Menu -->
			<ul
				class="nav-links fixed left-0 right-0 top-12 z-50 flex -translate-y-[200%] transform flex-col items-center gap-3 bg-bkg p-4 font-semibold text-txt-header shadow-lg peer-aria-expanded:translate-y-0 ~/lg:~text-base/xl sm:static sm:top-0 sm:translate-y-0 sm:flex-row sm:gap-6 sm:bg-transparent sm:p-0 sm:shadow-none"
				role="navigation"
			>
				{
					navLinks.map((link) => (
						<li
							role="none"
							class={`w-full cursor-pointer rounded-sm p-2 text-center ${link.style}`}
						>
							<a href={`${basePath}` + link.url} class={`btn nav-link whitespace-nowrap`}>
								{link.name}
							</a>
						</li>
					))
				}
				<!-- WhatsApp icon on desktop only -->
				<li>
					<div class="hidden sm:flex">
						<a href="#" data-modal-trigger="modal-contact">
							<Icon
								name="whatsapp"
								size="clamp(30px, 4vw, 50px)"
								class="text-muted shrink-0"
							/>
						</a>
					</div>
				</li>
			</ul>
		</div>
	</div>
	<!-- Backdrop -->
	<div
		id="menu-backdrop"
		class="fixed inset-x-0 bottom-0 left-0 top-[48px] z-40 hidden backdrop-blur-md sm:hidden"
	>
	</div>
</nav>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const navBtn = document.querySelector('#menu-btn');
		const navLinks = document.querySelectorAll('.nav-links a');
		const backdrop = document.querySelector('#menu-backdrop');
		const currentPath = window.location.pathname;
		const basePath = '/ilang'; //import.meta.env.BASE_URL;
		console.log('currentPath: ', currentPath);
		const body = document.body;

		// Toggle menu button
		navBtn?.addEventListener('click', () => {
			const expanded = navBtn.getAttribute('aria-expanded') === 'true';
			navBtn.setAttribute('aria-expanded', (!expanded).toString());

			// Toggle backdrop and body scroll-lock
			if (!expanded) {
				backdrop?.classList.remove('hidden');
				body.style.overflow = 'hidden'; // Disable scrolling
			} else {
				backdrop?.classList.add('hidden');
				body.style.overflow = ''; // Enable scrolling
			}
		});

		// Close menu when a link is clicked
		navLinks.forEach((link) => {
			if (link.getAttribute('href') === currentPath) {
				console.log("link.getAttribute('href'): ", link.getAttribute('href'));
				link.classList.add(
					'bg-gradient-to-r',
					'from-indigo-500',
					'via-purple-500',
					'to-pink-500',
					'bg-clip-text',
					'text-transparent',
					'font-bold',
					'pointer-events-none'
				);
			} else {
				link.classList.remove('text-txt-header', 'font-bold');
			}
			link.addEventListener('click', () => {
				navBtn?.setAttribute('aria-expanded', 'false');
				backdrop?.classList.add('hidden');
				body.style.overflow = ''; // Enable scrolling
			});
		});

		// Close menu when clicking on the backdrop
		backdrop?.addEventListener('click', () => {
			navBtn?.setAttribute('aria-expanded', 'false');
			backdrop.classList.add('hidden');
			body.style.overflow = ''; // Enable scrolling
		});
	});
</script>
